#!/bin/bash

set -o vi

term_init(){
  shopt -s checkwinsize; (:;:)
  printf '\e[?1049h\e[2J\e[?25l\e[?7l\e[999H'
  ((rows=LINES-1))
}

read_keys(){
  read -rsn1; [[ $REPLY == $'\e' ]]&& read -rsn2
  KEY="${REPLY^^}"
}

reply_path(){
  [[ $REPLY ]]||{ get_files; return; }
  [[ $REPLY =~ ^~ ]]&& REPLY="/home/${USER:-$(id -un)}/${REPLY#~\/}"
  [[ -d $REPLY ]]&& :
}

status_bar(){
  if [[ $1 ]]; then
    printf '\e[999H\e[2K\e[?25h\e[41;1;30mFML\e[m '
    read -rep "$1"&&{ printf '\e[?25l'; get_files; }
  else
    printf '\e[999H\e[2K\e[41;1;30mFML\e[m %s' \
      "${selected:-$PWD} ${selected:+$PWD}"
  fi
}

get_files(){
  unset files

  for _ in *; do
    if [[ $_ == '*' ]]; then
      files=('9m[empty]\e[m')
    elif [[ -h $_ ]]; then
      files+=("3m$_\e[m@")
    elif [[ -d $_ ]]; then
      files+=("4m$_\e[m/")
    elif [[ -x $_|| $_ == *'.sh' ]]; then
      files+=("2m$_\e[m*")
    else
      files+=("9m$_\e[m")
    fi
  done

  filesB=("${files[@]}")
  draw_files
}

draw_files(){
  unset i hist

  printf '\e[2J\e[999H'
  printf '\e[3%b\n' "${files[@]}"

  status_bar
}

hover_file(){
  hover="${files[cursor-LINES]:-}"
  hist+=("${cursor}H\e[3${hover}")
  (( ${i:=0} ))&&{
    printf '\e[%b\e[m' "${hist[0]}"
    hist=("${hist[@]:1}")
  }|| i=1

  printf '\e[%dH\e[1;7;9%b' "$cursor" "$hover"
}

infinite_scroll(){
  if (( ${#filesB[@]} > rows )); then
    if (( cursor < LINES-${#files[@]} )); then
      cursor="$rows"
    elif (( cursor > rows )); then
      cursor=1
      files=("${filesB[@]:0:${#files[@]}+$rows}")
      draw_files
    elif (( cursor < 1 )); then
      cursor="$rows"
      files=("${files[@]:0:${#files[@]}-$rows}")
      draw_files
    fi
  else
    if (( cursor > rows )); then
      ((cursor=LINES-${#files[@]}))
    elif (( cursor < LINES-${#files[@]} )); then
      cursor="$rows"
    fi
  fi

  printf '\e[%dH' "$cursor"
}

file_read(){ mapfile -tn 250 <"$1"; printf '%s\n' "${MAPFILE[@]}"; }

hidden_toggle(){
  if shopt -p dotglob; then
    shopt -u dotglob; else shopt -s dotglob
  fi

  get_files; status_bar
}

change_directory(){
  statuS_bar 'Change directory to: '
  reply_path&&{ cd "$REPLY"; get_files; }
}

execute_command(){
  status_bar 'Execute: '
  [[ $REPLY ]]&&{ printf '\e[2J\e[999H'; bash -c "$REPLY"; status_bar; }
}

create_file(){
  status_bar 'Create file: '

  if [[ $REPLY =~ /$ ]]; then
    mkdir "$REPLY" 2>/dev/null; get_files
  elif [[ $REPLY ]]; then
    >"$REPLY"; get_files
  else
    get_files
  fi
}

copy_selected(){
  status_bar "Copy $selected to: "

  reply_path&& cp -r "$selectedPath" "$REPLY"&&
    { get_files; status_bar "${selected^} copied to $REPLY"; }
}

move_selected(){
  status_bar "Move $selected to: "

  reply_path&& mv "$selectedPath" "$REPLY"&&
    { get_files; status_bar "${selected^} moved to $REPLY"; }
}

delete_selected(){
  status_bar "Delete $selectedPath? [y/N]: "
  [[ ${REPLY,,} =~ ^(~)?y(es)?$ ]]||{ get_files; return; }

  rm -r "$selectedPath"&&{ get_files; status_bar "$selectedPath deleted"; }
}

page_up(){
  if (( ${#files[@]} > rows )); then
    cursor=1
  else
    ((cursor=LINES-${#files[@]}))
  fi
}

file_selected(){
  selected="${hover#[0-9]m}" selected="${selected%\\e*}"
  [[ $selected == '[empty]' ]]&& unset selected
  selectedPath="${PWD%/$selected}/$selected"

  if [[ -d "$selected" ]]; then
    cd "$selected" 2>/dev/null&&{ cursor="$rows"; get_files; }
  elif [[ -f "$selected" ]]; then
    printf '\e[?1049l\e[2J\e[999H'
    file_read "$selected"; status_bar

    selected_keymap
  fi

  status_bar
}

execute_keymap(){
  for((;;)){
    read_keys
    case $KEY in
      :) execute_command;;
      \[D) get_files; break;;
    esac
  }
}

selected_keymap(){
  for((;;)){
    read_keys
    case $KEY in
      H|\[D) printf '\e[?1049h\e[?25l\e[?7l'; get_files; status_bar; break;;
      L|\[C) "${EDITOR:-${VISUAL:-vim}}" "$selected"
    esac
  }
}

main_keymap(){
  read_keys
  case $KEY in
    Q) printf '\e[?1049l\e[?25h\e[?7h'; exit;;
    .) hidden_toggle;;
    /) change_directory;;
    :) execute_command; execute_keymap;;
    N) create_file;;
    C) [[ $selected ]]&& copy_selected;;
    M) [[ $selected ]]&& move_selected;;
    X|\[3) [[ $selected ]]&& delete_selected;;
    \[H) cd ~/; get_files;;
    \[5) page_up;;
    \[6) cursor=1;;
    A|H|\[D) cursor="$rows"; cd ../; get_files; status_bar;;
    -|S|J|\[B) ((cursor++));;
    +|W|K|\[A) ((cursor--));;
    D|L|\[C) file_selected;;
  esac
}

trap 'printf "\e[?1049l\e[?25h\e[?7h"; exit' INT
trap 'term_init; get_files; status_bar' WINCH

term_init; cursor="$rows"
get_files; hover_file; status_bar
for((;;)){ main_keymap; infinite_scroll; hover_file; }